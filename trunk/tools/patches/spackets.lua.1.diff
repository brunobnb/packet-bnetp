Index: spackets.lua
===================================================================
--- spackets.lua	(revisi¢n: 49)
+++ spackets.lua	(revisi¢n: 52)
@@ -1,7 +1,7 @@
 ]]
 [BNLS_CDKEY] = { -- 0x01
 	uint32{label="Result", desc=Descs.YesNo},
-	uint32("Client Token"),
+	uint32("Client Token", base.HEX),
 	array{label="CD key data for SID_AUTH_CHECK", of=uint32, num=9},
 },
 --[[doc
@@ -1,6 +1,9 @@
 ]]
 [BNLS_REQUESTVERSIONBYTE] = { -- 0x10
-	uint32("Productif Product is nonzero:"),
-	uint32("Version byte"),
+	uint32{label="Product", key="prod"},
+	when{
+		condition=function(...) return arg[2].packet.prod ~= 0 end,
+		block = {uint32("Version byte", base.HEX)},
+	}
 },
 --[[doc
@@ -1,9 +1,9 @@
 [BNLS_VERSIONCHECKEX2] = { -- 0x1A
 	uint32{label="Success*", desc=Descs.YesNo},
-	uint32("Version."),
-	uint32("Checksum."),
+	version("Version."),
+	uint32("Checksum.", base.HEX),
 	stringz("Version check stat string."),
-	uint32("Cookie."),
-	uint32("The latest version code for this product."),
+	uint32("Cookie.", base.HEX),
+	uint32("The latest version code for this product.", base.HEX),
 },
 --[[doc
@@ -1,12 +1,25 @@
 
 ]]
 [MCP_JOINGAME] = { -- 0x04
-	uint16("Request ID"),
+	uint16("Request ID", base.HEX),
-	uint16("Game token"),
+	uint16("Game token", base.HEX),
-	uint16("Unknown"),
+	uint16("Unknown", base.HEX),
-	uint32("IP of D2GS Server"),
+	ipv4("IP of D2GS Server"),
 	uint32("Game hash"),
-	uint32("Result"),
+	uint32("Result", base.HEX, {
+		[0x00] = "Game joining succeeded.",
+		[0x29] = "Password incorrect.",
+		[0x2A] = "Game does not exist.",
+		[0x2B] = "Game is full.",
+		[0x2C] = "You do not meet the level requirements for this game.",
+		[0x6E] = "A dead hardcore character cannot join a game.",
+		[0x71] = "A non-hardcore character cannot join a game created by a Hardcore character.",
+		[0x73] = "Unable to join a Nightmare game.",
+		[0x74] = "Unable to join a Hell game.",
+		[0x78] = "A non-expansion character cannot join a game created by an Expansion character.",
+		[0x79] = "A Expansion character cannot join a game created by a non-expansion character.",
+		[0x7D] = "A non-ladder character cannot join a game created by a Ladder character.",
+	}),
 },
 --[[doc
     Message ID:    0x05
@@ -1,5 +1,12 @@
 [SID_SERVERLIST] = { -- 0x04
 	uint32("Server version"),
-	stringz("[] Server list"),
+	iterator{
+		label="Server list",
+ 		alias="bytes",
+ 		condition = function(self, state) return state.packet.srvr ~="" end,
+ 		repeated = {
+ 			WProtoField.stringz{label="Server", key="srvr"},
+ 		},
+ 	}
 },
 --[[doc
@@ -1,10 +1,10 @@
 
 ]]
 [SID_CLIENTID] = { -- 0x05
-	uint32("Registration Version"),
-	uint32("Registration Authority"),
-	uint32("Account Number"),
-	uint32("Registration Token"),
+	uint32("Registration Version", base.HEX),
+	uint32("Registration Authority", base.HEX),
+	uint32("Account Number", base.HEX),
+	uint32("Registration Token", base.HEX),
 },
 --[[doc
     Message ID:    0x06
@@ -1,7 +1,12 @@
 
 ]]
 [SID_REPORTVERSION] = { -- 0x07
-	uint32("Result"),
+	uint32("Result", base.DEC, {
+		[0x00] = "Failed version check",
+		[0x01] = "Old game version",
+		[0x02] = "Success",
+		[0x03] = "Reinstall required",
+	}),
 	stringz("Patch path"),
 },
 --[[doc
@@ -1,7 +1,10 @@
 
 ]]
 [SID_STARTADVEX] = { -- 0x08
-	uint32("Status"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Failed",
+		[0x01] = "Success",
+	}),
 },
 --[[doc
     Message ID:    0x09
@@ -1,21 +1,44 @@
 
 ]]
 [SID_GETADVLISTEX] = { -- 0x09
-	uint32("Number of games"),
-	uint32("Status"),
-	uint16("Game Type"),
-	uint16("Parameter"),
-	uint32("Language ID"),
-	uint16("Address Family"),
-	uint16("Port"),
-	uint32("Host's IP"),
-	uint32("sin_zero"),
-	uint32("sin_zero"),
-	uint32("Game Status"),
-	uint32("Elapsed time"),
-	stringz("Game name"),
-	stringz("Game password"),
-	stringz("Game statstring"),
+	uint32{label="Number of games", key="games"},
+	when{condition=Cond.equals("games", 0),
+		block = {
+			uint32("Status", base.DEC, Descs.GameStatus)
+		},
+		otherwise = {
+			iterator{label="Game Information", refkey="games", repeated={
+				uint16("Game Type", base.HEX, {
+					[0x02] = "Melee",
+					[0x03] = "Free for all",
+					[0x04] = "one vs one",
+					[0x05] = "CTF",
+					[0x06] = "Greed",
+					[0x07] = "Slaughter",
+					[0x08] = "Sudden Death",
+					[0x09] = "Ladder",
+					[0x10] = "Iron man ladder",
+					[0x0A] = "Use Map Settings",
+					[0x0B] = "Team Melee",
+					[0x0C] = "Team FFA",
+					[0x0D] = "Team CTF",
+					[0x0F] = "Top vs Bottom",
+				}),
+				uint16("Parameter", base.HEX),
+				uint32("Language ID", base.HEX),
+				uint16("Address Family", base.DEC, {[2]="AF_INET"}),
+				uint16{label="Port", big_endian=true},
+				ipv4("Host's IP"),
+				uint32("sin_zero"),
+				uint32("sin_zero"),
+				uint32("Status", base.DEC, Descs.GameStatus),
+				uint32("Elapsed time"),
+				stringz("Game name"),
+				stringz("Game password"),
+				stringz("Game statstring"),
+			}},
+		}
+	},
 },
 --[[doc
     Message ID:    0x0A
@@ -1,7 +1,13 @@
 
 ]]
 [SID_GETCHANNELLIST] = { -- 0x0B
-	stringz("[] Channel names, each terminated by a null string."),
+	iterator{
+		alias="none",
+		condition = function(self, state) return state.packet.chan ~="" end,
+		repeated = {
+			stringz{label="Channel name", key="chan"},
+		}
+	}
 },
 --[[doc
     Message ID:    0x0F
@@ -1,12 +1,28 @@
 
 ]]
 [SID_CHATEVENT] = { -- 0x0F
-	uint32("Event ID"),
-	uint32("User's Flags"),
-	uint32("Ping"),
-	uint32("IP Address"),
-	uint32("Account number"),
-	uint32("Registration Authority"),
+	uint32("Event ID", base.DEX, {
+		[0x01] = "EID_SHOWUSER: User in channel",
+		[0x02] = "EID_JOIN: User joined channel",
+		[0x03] = "EID_LEAVE: User left channel",
+		[0x04] = "EID_WHISPER: Recieved whisper",
+		[0x05] = "EID_TALK: Chat text",
+		[0x06] = "EID_BROADCAST: Server broadcast",
+		[0x07] = "EID_CHANNEL: Channel information",
+		[0x09] = "EID_USERFLAGS: Flags update",
+		[0x0A] = "EID_WHISPERSENT: Sent whisper",
+		[0x0D] = "EID_CHANNELFULL: Channel full",
+		[0x0E] = "EID_CHANNELDOESNOTEXIST: Channel doesn't exist",
+		[0x0F] = "EID_CHANNELRESTRICTED: Channel is restricted",
+		[0x12] = "EID_INFO: Information",
+		[0x13] = "EID_ERROR: Error message",
+		[0x17] = "EID_EMOTE: Emote",
+	}),
+	uint32("User's Flags", base.HEX),
+	uint32("Ping", base.HEX),
+	uint32("IP Address", base.HEX),
+	uint32("Account number", base.HEX),
+	uint32("Registration Authority", base.HEX),
 	stringz("Username"),
 	stringz("Text"),
 },
@@ -1,8 +1,8 @@
 
 ]]
 [SID_CHECKAD] = { -- 0x15
-	uint32("Ad ID"),
-	uint32("File extension"),
+	uint32("Ad ID", base.HEX),
+	strdw("File extension"),
 	wintime("Local file time"),
 	stringz("Filename"),
 	stringz("Link URL"),
@@ -1,8 +1,16 @@
 
 ]]
 [SID_REGISTRY] = { -- 0x18
-	uint32("Cookie"),
-	uint32("HKEY"),
+	uint32("Cookie", base.HEX),
+	uint32("HKEY", base.HEX, {
+		[0x80000000] = "HKEY_CLASSES_ROOT",
+		[0x80000001] = "HKEY_CURRENT_USER",
+		[0x80000002] = "HKEY_LOCAL_MACHINE",
+		[0x80000003] = "HKEY_USERS",
+		[0x80000004] = "HKEY_PERFORMANCE_DATA",
+		[0x80000005] = "HKEY_CURRENT_CONFIG",
+		[0x80000006] = "HKEY_DYN_DATA",
+	}),
 	stringz("Registry path"),
 	stringz("Registry key"),
 },
@@ -1,7 +1,7 @@
 
 ]]
 [SID_STARTADVEX3] = { -- 0x1C
-	uint32("Status"),
+	uint32("Status", base.DEC,{[0x00] ="Ok", [0x01] = "Failed"}),
 },
 --[[doc
     Message ID:    0x1D
@@ -1,8 +1,8 @@
 
 ]]
 [SID_LOGONCHALLENGEEX] = { -- 0x1D
-	uint32("UDP Token"),
-	uint32("Server Token"),
+	uint32("UDP Token", base.HEX),
+	uint32("Server Token", base.HEX),
 },
 --[[doc
     Message ID:    0x25
@@ -1,7 +1,7 @@
 
 ]]
 [SID_PING] = { -- 0x25
-	uint32("Ping Value"),
+	uint32("Ping Value", base.HEX),
 },
 --[[doc
     Message ID:    0x26
@@ -1,7 +1,11 @@
 [SID_READUSERDATA] = { -- 0x26
 	uint32("Number of accounts"),
-	uint32("Number of keys"),
+	uint32{label="Number of keys", key="numkeys"},
 	uint32("Request ID"),
-	stringz("[] Requested Key Values"),
+	iterator{
+		refkey="numkeys",
+		repeated={stringz("Requested Key Value")},
+		label="Key Values",
+	},
 },
 --[[doc
@@ -1,7 +1,7 @@
 
 ]]
 [SID_LOGONCHALLENGE] = { -- 0x28
-	uint32("Server Token"),
+	uint32("Server Token", base.HEX),
 },
 --[[doc
     Message ID:    0x29
@@ -1,7 +1,10 @@
 
 ]]
 [SID_LOGONRESPONSE] = { -- 0x29
-	uint32("Result"),
+	uint32("Result", base.DEC, {
+		[0x00] = "Invalid password",
+		[0x01] = "Success",
+	}),
 },
 --[[doc
     Message ID:    0x2A
@@ -1,7 +1,10 @@
 
 ]]
 [SID_CREATEACCOUNT] = { -- 0x2A
-	uint32("Result"),
+	uint32("Result", base.DEC, {
+		[0x00] = "Failed",
+		[0x01] = "Success",
+	}),
 },
 --[[doc
     Message ID:    0x2D
@@ -1,30 +1,37 @@
 
 ]]
 [SID_GETLADDERDATA] = { -- 0x2E
-	uint32("Ladder type"),
-	uint32("League"),
-	uint32("Sort method"),
-	uint32("Starting rank"),
-	uint32("Number of ranks listed"),
-	uint32("Wins"),
-	uint32("Losses"),
-	uint32("Disconnects"),
-	uint32("Rating"),
-	uint32("Rank"),
-	uint32("Official wins"),
-	uint32("Official losses"),
-	uint32("Official disconnects"),
-	uint32("Official rating"),
-	uint32("Unknown"),
-	uint32("Official rank"),
-	uint32("Unknown"),
-	uint32("Unknown"),
-	uint32("Highest rating"),
-	uint32("Unknown"),
-	uint32("Season"),
-	wintime("Last game time"),
-	wintime("Official last game time"),
-	stringz("Name"),
+	uint32("Ladder type", base.HEX),
+	uint32("League", base.HEX),
+	uint32("Sort method", base.DEC, {
+		[0x00] = "Highest rating",
+		[0x01] = "Fastest climbers",
+		[0x02] = "Most wins on record",
+		[0x03] = "Most games played",
+	}),
+	uint32("Starting rank", base.HEX),
+	uint32{label="Number of ranks listed", key="ranks"},
+	iterator{label="Rank", refkey="ranks", repeated={
+		uint32("Wins"),
+		uint32("Losses"),
+		uint32("Disconnects"),
+		uint32("Rating"),
+		uint32("Rank"),
+		uint32("Official wins"),
+		uint32("Official losses"),
+		uint32("Official disconnects"),
+		uint32("Official rating"),
+		uint32("Unknown", base.HEX),
+		uint32("Official rank"),
+		uint32("Unknown", base.HEX),
+		uint32("Unknown", base.HEX),
+		uint32("Highest rating"),
+		uint32("Unknown", base.HEX),
+		uint32("Season"),
+		wintime("Last game time"),
+		wintime("Official last game time"),
+		stringz("Name"),
+	}},
 },
 --[[doc
     Message ID:    0x2F
@@ -1,7 +1,13 @@
 
 ]]
 [SID_CDKEY] = { -- 0x30
-	uint32("Result"),
+	uint32("Result", base.DEC, {
+		[0x01] = "Ok",
+		[0x02] = "Invalid key",
+		[0x03] = "Bad product",
+		[0x04] = "Banned",
+		[0x05] = "In use",
+	}),
 	stringz("Key owner"),
 },
 --[[doc
@@ -1,7 +1,11 @@
 
 ]]
 [SID_CHECKDATAFILE] = { -- 0x32
-	uint32("Status"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Rejected",
+		[0x01] = "Approved",
+		[0x02] = "Ladder approved",
+	}),
 },
 --[[doc
     Message ID:    0x33
@@ -1,8 +1,8 @@
 
 ]]
 [SID_GETFILETIME] = { -- 0x33
-	uint32("Request ID"),
-	uint32("Unknown"),
+	uint32("Request ID", base.HEX),
+	uint32("Unknown", base.HEX),
 	wintime("Last update time"),
 	stringz("Filename"),
 },
@@ -1,11 +1,13 @@
 
 ]]
 [SID_QUERYREALMS] = { -- 0x34
-	uint32("Unknown"),
-	uint32("Count"),
-	uint32("Unknown"),
-	stringz("Realm title"),
-	stringz("Realm description"),
+	uint32("Unknown", base.HEX),
+	uint32{label="Count", key="realms"},
+	iterator{label="Realm", refkey="realms", repeated={
+		uint32("Unknown", base.HEX),
+		stringz("Realm title"),
+		stringz("Realm description"),
+	}},
 },
 --[[doc
     Message ID:    0x35
@@ -1,11 +1,13 @@
 
 ]]
 [SID_PROFILE] = { -- 0x35
-	uint32("Cookie"),
-	uint8("Success"),
-	stringz("Profile\\Description value"),
-	stringz("Profile\\Location value"),
-	uint32("Clan Tag"),
+	uint32("Cookie", base.HEX),
+	uint8{label="Success", key="status"},
+	when{condition=Cond.equals("status", 0), block={
+		stringz("Profile\\Description value"),
+		stringz("Profile\\Location value"),
+		uint32("Clan Tag"),
+	}},
 },
 --[[doc
     Message ID:    0x36
@@ -1,7 +1,13 @@
 
 ]]
 [SID_CDKEY2] = { -- 0x36
-	uint32("Result"),
+	uint32("Result", base.DEC, {
+		[0x01] = "Ok",
+		[0x02] = "Invalid key",
+		[0x03] = "Bad product",
+		[0x04] = "Banned",
+		[0x05] = "In use",
+	}),
 	stringz("Key owner"),
 },
 --[[doc
@@ -1,8 +1,15 @@
 
 ]]
 [SID_LOGONRESPONSE2] = { -- 0x3A
-	uint32("Result"),
-	stringz("Reason"),
+	uint32{label="Result", display=base.DEC, desc={
+		[0x00] = "Success",
+		[0x01] = "Account Does Not Exist",
+		[0x02] = "Invalid Password",
+		[0x06] = "Account Closed",
+	}, key="res"},
+	when{condition=Cond.equals("res", 6), block={
+		stringz("Reason"),
+	}},
 },
 --[[doc
     Message ID:    0x3C
@@ -1,7 +1,11 @@
 
 ]]
 [SID_CHECKDATAFILE2] = { -- 0x3C
-	uint32("Result"),
+	uint32("Result", base.DEC, {
+		[0x00] = "Not approved",
+		[0x01] = "Blizzard approved",
+		[0x02] = "Approved for ladder",
+	}),
 },
 --[[doc
     Message ID:    0x3D
@@ -1,8 +1,14 @@
 
 ]]
 [SID_CREATEACCOUNT2] = { -- 0x3D
-	uint32("Status"),
-	stringz("Account name suggestion"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Account created",
+		[0x02] = "Name contained invalid characters",
+		[0x03] = "Name contained a banned word",
+		[0x04] = "Account already exists",
+		[0x06] = "Name did not contain enough alphanumeric characters",
+	}),
+	-- stringz("Account name suggestion"),
 },
 --[[doc
     Message ID:    0x3E
@@ -1,13 +1,16 @@
 
 ]]
 [SID_LOGONREALMEX] = { -- 0x3E
-	uint32("MCP Cookie"),
-	uint32("MCP Status"),
-	uint32("[2] MCP Chunk 1"),
-	uint32("IP"),
-	uint32("Port"),
-	uint32("[12] MCP Chunk 2"),
-	stringz("Battle.net unique name"),
+	uint32("MCP Cookie", base.HEX),
+	uint32{label="MCP Status", key="status"},
+	when{condition=Cond.equals("status", 0), block={
+		array{of=uint32, label="MCP Chunk 1", num=2},
+		ipv4("IP"),
+		uint16{label="Port", big_endian=true},
+		bytes{label="Padding", length=2},
+		array{of=uint32, label="MCP Chunk 2", num=12},
+		stringz("Battle.net unique name"),
+	}},
 },
 --[[doc
     Message ID:      0x3F
@@ -1,11 +1,13 @@
 
 ]]
 [SID_QUERYREALMS2] = { -- 0x40
-	uint32("Unknown"),
-	uint32("Count"),
-	uint32("Unknown"),
-	stringz("Realm title"),
-	stringz("Realm description"),
+	uint32("Unknown", base.HEX),
+	uint32{label="Count", key="realms"},
+	iterator{label="Realm", refkey="realms", repeated={
+		uint32("Unknown", base.HEX),
+		stringz("Realm title"),
+		stringz("Realm description"),
+	}},
 },
 --[[doc
     Message ID:    0x41
@@ -1,52 +1,72 @@
 
 ]]
 [SID_WARCRAFTGENERAL] = { -- 0x44
-	uint8("Subcommand ID"),
-	uint32("Cookie"),
-	uint32("Icon ID"),
-	uint8("Number of ladder records to read; this will be between 0"),
-	uint32("Ladder type; valid types are 'SOLO', 'TEAM', or"),
-	uint16("Number of wins"),
-	uint16("Number of losses"),
-	uint8("Level"),
-	uint8("Hours until XP decay, if applicable*"),
-	uint16("Experience"),
-	uint32("Rank"),
-	uint8("Number of race records to read; this will be 5 for WAR3"),
-	uint16("Wins"),
-	uint16("Losses"),
-	uint8("Number of team records to read."),
-	uint32("Type of team; valid types are '2VS2', '3VS3', and"),
-	uint16("Number of wins"),
-	uint16("Number of losses"),
-	uint8("Level"),
-	uint8("Hours until XP decay, if applicable*"),
-	uint16("Experience"),
-	uint32("Rank"),
-	wintime("Time of last game played"),
-	uint8("Number of partners"),
-	stringz("[] Names of partners"),
-	uint32("Cookie"),
-	uint8("Number of ladder records to read; this will be between 0"),
-	uint32("Ladder type; valid types are 'SOLO', 'TEAM', or"),
-	uint16("Number of wins"),
-	uint16("Number of losses"),
-	uint8("Level"),
-	uint8("Hours until XP decay, if applicable*"),
-	uint16("Experience"),
-	uint32("Rank"),
-	uint8("Number of race records to read; this will be 5 for WAR3"),
-	uint16("Wins"),
-	uint16("Losses"),
-	uint32("Cookie"),
-	uint32("Unknown"),
-	uint8("Tiers"),
-	uint8("Count"),
-	uint32("Icon"),
-	uint32("Name"),
-	uint8("Race"),
-	uint16("Wins required"),
-	uint8("Unknown"),
+	uint8{label="Subcommand ID", display=base.HEX, key="subcommand"},
+	when{condition=Cond.equals("subcommand", 0x4), block = {
+		uint32("Cookie", base.HEX),
+		stringz{label="Icon ID", length=4},
+		uint8{label="Number of ladder records", key="ladders"},
+		iterator{label="Ladder Record", refkey="ladders", repeated={
+			strdw("Ladder type"),
+			uint16("Number of wins"),
+			uint16("Number of losses"),
+			uint8("Level"),
+			uint8("Hours until XP decay"),
+			uint16("Experience"),
+			uint32("Rank"),
+		}},
+		uint8{label="Number of race records", key="races"},
+		iterator{label="Race Record", refkey="races", repeated={
+			uint16("Wins"),
+			uint16("Losses"),
+		}},
+		uint8{label="Number of team records", key="teams"},
+		iterator{label="Team Record", refkey="teams", repeated={
+			strdw("Type of team"),
+			uint16("Number of wins"),
+			uint16("Number of losses"),
+			uint8("Level"),
+			uint8("Hours until XP decay"),
+			uint16("Experience"),
+			uint32("Rank"),
+			wintime("Time of last game played"),
+			uint8{label="Number of partners", key="partners"},
+			iterator{label="Partners", refkey="partners", repeated={
+				stringz("Names of partners"),
+			}},
+		}},
+	}},
+	when{condition=Cond.equals("subcommand", 0x8), block={
+		uint32("Cookie", base.HEX),
+		uint8{label="Number of ladder records", key="ladders"},
+		iterator{label="Ladder Record", refkey="ladders", repeated={
+			strdw("Ladder type"),
+			uint16("Number of wins"),
+			uint16("Number of losses"),
+			uint8("Level"),
+			uint8("Hours until XP decay"),
+			uint16("Experience"),
+			uint32("Rank"),
+		}},
+		uint8{label="Number of race records", key="races"},
+		iterator{label="Race Record", refkey="races", repeated={
+			uint16("Wins"),
+			uint16("Losses"),
+		}},
+	}},
+	when{condition=Cond.equals("subcommand", 0x9), block={
+		uint32("Cookie", base.HEX),
+		uint32("Unknown", base.HEX),
+		uint8("Tiers"),
+		uint8{label="Count (Number of Icons?)", key="icons"},
+		iterator{label="Icon", refkey="icons", repeated={
+			uint32("Icon", base.HEX),
+			uint32("Name", base.HEX),
+			uint8("Race", base.HEX),
+			uint16("Wins required"),
+			uint8("Unknown", base.HEX),
+		}},
+	}},
 },
 --[[doc
     Message ID:    0x46
@@ -1,10 +1,16 @@
 ]]
 [SID_NEWS_INFO] = { -- 0x46
-	uint8("Number of entries"),
-	uint32("Last logon timestamp"),
-	uint32("Oldest news timestamp"),
-	uint32("Newest news timestamp"),
-	uint32("Timestamp"),
-	stringz("News"),
+	uint8{label="Number of entries", key="news" },
+	posixtime("Last logon timestamp"),
+	posixtime("Oldest news timestamp"),
+	posixtime("Newest news timestamp"),
+	iterator{label="News", refkey="news", repeated={
+		posixtime{label="Timestamp", key="stamp"},
+		when{
+			condition=function(self, state) return state.packet.stamp == 0 end,
+			block = { stringz("MOTD") },
+			otherwise = {stringz("News")},
+		},},
+	},
 },
 --[[doc
@@ -1,12 +1,12 @@
 
 ]]
 [SID_TOURNAMENT] = { -- 0x4E
-	uint8("Unknown"),
-	uint8("Unknown, maybe number of non-null strings sent?"),
+	uint8("Unknown", base.HEX),
+	uint8("Unknown, maybe number of non-null strings sent?", base.HEX),
 	stringz("Description"),
 	stringz("Unknown"),
 	stringz("Website"),
-	uint32("Unknown"),
+	uint32("Unknown", base.HEX),
 	stringz("Name"),
 	stringz("Unknown"),
 	stringz("Unknown"),
@@ -1,13 +1,20 @@
 
 ]]
 [SID_AUTH_INFO] = { -- 0x50
-	uint32("Logon Type"),
-	uint32("Server Token"),
-	uint32("UDPValue *"),
+	uint32{label="Logon Type", key="type", desc={
+		[0x00] = "Broken SHA-1 (STAR/SEXP/D2DV/D2XP)",
+		[0x01] = "NLS Version 1",
+		[0x02] = "NLS Version 2 (WA3/W3XP)",
+	}},
+	uint32("Server Token", base.HEX),
+	uint32("UDPValue", base.HEX),
 	wintime("MPQ filetime"),
 	stringz("IX86ver filename"),
 	stringz("ValueString"),
-	bytes("128-byte Server signature"),
+	when{
+		condition = function(self,state) return state.packet.type == 2 end,
+		block = { bytes{label="Server signature", length=128}},
+	},
 },
 --[[doc
     Message ID:    0x51
@@ -1,6 +1,34 @@
 ]]
 [SID_AUTH_CHECK] = { -- 0x51
-	uint32("Result"),
-	stringz("Additional Information"),
+	uint32{label="Result", key="res", display = base.HEX, desc={
+		[0x000] = "Passed challenge",
+		[0x100] = "Old game version",
+		[0x101] = "Invalid version",
+		[0x102] = "Game version must be downgraded",
+		-- ?? [0x0NN] = "(where NN is the version code supplied in SID_AUTH_INFO):
+		-- Invalid version code (note that 0x100 is not set in this case)",
+		[0x200] = "Invalid CD key",
+		[0x201] = "CD key in use",
+		[0x202] = "Banned key",
+		[0x203] = "Wrong product",
+		-- The last 4 codes also apply to the second CDKey, as indicated by a
+		-- bitwise combination with 0x010.
+		[0x210] = "Invalid CD key",
+		[0x211] = "CD key in use",
+		[0x212] = "Banned key",
+		[0x213] = "Wrong product",
+	}},
+	when{
+		condition=function(self, state)
+			return (state.packet.res == 0x100) or (state.packet.res == 0x102)
+		end,
+		block = { stringz("MPQ Filename") },
+	},
+	when{
+		condition=function(self, state)
+			return bit.band(state.packet.res, 0x201) == 0x201
+		end,
+		block = { stringz("Username") },
+	},
 },
 --[[doc
@@ -1,7 +1,16 @@
 
 ]]
 [SID_AUTH_ACCOUNTCREATE] = { -- 0x52
-	uint32("Status"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Successfully created account name.",
+		[0x04] = "Name already exists.",
+		[0x07] = "Name is too short/blank.",
+		[0x08] = "Name contains an illegal character.",
+		[0x09] = "Name contains an illegal word.",
+		[0x0a] = "Name contains too few alphanumeric characters.",
+		[0x0b] = "Name contains adjacent punctuation characters.",
+		[0x0c] = "Name contains too many punctuation characters.",
+	}),
 },
 --[[doc
     Message ID:    0x53
@@ -1,7 +1,11 @@
 ]]
 [SID_AUTH_ACCOUNTLOGON] = { -- 0x53
-	uint32("Status"),
-	uint8("[32] Salt"),
-	uint8("[32] Server Key"),
+	uint32("Status", base.HEX, {
+		[0x00] = "Logon accepted, requires proof.",
+		[0x01] = "Account doesn't exist.",
+		[0x05] = "Account requires upgrade.",
+	}),
+	array{of=uint8, num=32, label="Salt"},
+	array{of=uint8, num=32, label="Server Key"},
 },
 --[[doc
@@ -1,9 +1,16 @@
 
 ]]
 [SID_AUTH_ACCOUNTLOGONPROOF] = { -- 0x54
-	uint32("Status"),
-	uint8("[20] Server Password Proof"),
-	stringz("Additional information"),
+	uint32{label="Status", display=base.DEC, desc={
+		[0x00] = "Logon successful.",
+		[0x02] = "Incorrect password.",
+		[0x0E] = "An email address should be registered for this account.",
+		[0x0F] = "Custom error. A string at the end of this message contains the error.",
+	}, key="status"},
+	array{of=uint8, num=20, label="Server Password Proof"},
+	when{condition=Cond.equals("status", 0x0F), block={
+		stringz("Additional information")
+	}},
 },
 --[[doc
     Message ID:    0x55
@@ -1,9 +1,13 @@
 
 ]]
 [SID_AUTH_ACCOUNTCHANGE] = { -- 0x55
-	uint32("Status"),
-	uint8("[32] Salt"),
-	uint8("[32] Server key"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Change accepted, requires proof.",
+		[0x01] = "Account doesn't exist.",
+		[0x05] = "Account requires upgrade",
+	}),
+	array{of=uint8, num=32, label="Salt"},
+	array{of=uint8, num=32, label="Server Key"}
 },
 --[[doc
     Message ID:    0x56
@@ -1,8 +1,11 @@
 
 ]]
 [SID_AUTH_ACCOUNTCHANGEPROOF] = { -- 0x56
-	uint32("Status code"),
-	uint8("[20] Server password proof for old password"),
+	uint32("Status code", base.DEC, {
+		[0x00] = "Password changed.",
+		[0x02] = "Incorrect old password.",
+	}),
+	array{of=uint8, num=20, label="Server password proof for old password"},
 },
 --[[doc
     Message ID:      0x57
@@ -1,8 +1,11 @@
 
 ]]
 [SID_AUTH_ACCOUNTUPGRADE] = { -- 0x57
-	uint32("Status"),
-	uint32("Server Token"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Upgrade Request Accepted",
+		[0x01] = "Upgrade Request Denied",
+	}),
+	uint32("Server Token", base.HEX),
 },
 --[[doc
     Message ID:      0x58
@@ -1,8 +1,11 @@
 
 ]]
 [SID_AUTH_ACCOUNTUPGRADEPROOF] = { -- 0x58
-	uint32("Status"),
-	uint32("[5] Password proof"),
+	uint32("Status", base.DEC, {
+		[0x00] = "Password changed.",
+		[0x02] = "Incorrect old password.",
+	}),
+	array{of=uint32, num=5, label="Password proof"},
 },
 --[[doc
     Message ID:    0x59
@@ -1,7 +1,10 @@
 
 ]]
 [SID_WARDEN] = { -- 0x5E
-	bytes("Encrypted Packet"),
+	bytes{label="Encrypted Packet",
+		size=function(self, state) return state.packet.length end,
+	},
+--[[TODO
 	uint8("Packet Code"),
 	uint32("[4] MD5 Hash of the current Module"),
 	uint32("[4] Decryption key for Module"),
@@ -1,6 +1,7 @@
 	uint32("Funct3"),
 	uint32("Funct4"),
 	uint32("[5] Unknown"),
+]]
 },
 --[[doc
     Message ID:    0x60
@@ -1,8 +1,10 @@
 
 ]]
 [SID_GAMEPLAYERSEARCH] = { -- 0x60
-	uint8("Number of players"),
-	stringz("[] Player names"),
+	uint8{label="Number of players", key="players"},
+	iterator{alias="none", refkey="players", repeated={
+		stringz("Player name"),
+	}},
 },
 --[[doc
     Message ID:    0x65
@@ -1,9 +1,21 @@
 ]]
 [SID_FRIENDSADD] = { -- 0x67
 	stringz("Account"),
-	uint8("Friend Type"),
-	uint8("Friend Status"),
-	uint32("ProductID"),
+	uint8("Friend Type", base.DEC, {
+		[0x00] = "Non-mutual",
+		[0x01] = "Mutual",
+		[0x02] = "Nonmutual, DND",
+		[0x03] = "Mutual, DND",
+		[0x04] = "Nonmutual, Away",
+		[0x05] = "Mutual, Away",
+	}),
+	uint8("Friend Status", base.DEC, {
+		[0x00] = "Offline",
+		[0x02] = "In chat",
+		[0x03] = "In public game",
+		[0x05] = "In private game",
+	}),
+	uint32("ProductID", base.HEX),
 	stringz("Location"),
 },
 --[[doc
@@ -1,8 +1,20 @@
 ]]
 [SID_CLANMEMBERSTATUSCHANGE] = { -- 0x7F
 	stringz("Username"),
-	uint8("Rank"),
-	uint8("Status"),
+	uint8("Rank", base.DEC, {
+		[0x00] = "Initiate that has been in the clan for less than one week",
+		[0x01] = "Initiate that has been in the clan for over one week",
+		[0x02] = "Member",
+		[0x03] = "Officer",
+		[0x04] = "Leader",
+	}),
+	uint8("Status", base.DEC, {
+		[0x00] = "Offline",
+		[0x01] = "Online (not in either channel or game)",
+		[0x02] = "In a channel",
+		[0x03] = "In a public game",
+		[0x05] = "In a private game)",
+	}),
 	stringz("Location"),
 },
 --[[doc
